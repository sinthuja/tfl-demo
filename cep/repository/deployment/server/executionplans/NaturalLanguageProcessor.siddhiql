/* Enter a unique ExecutionPlan */
@Plan:name('NaturalLanguageProcessor')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */

@Plan:trace('true')

@Import('twitterInputStream:1.0.0')
define stream twitterInputStream (twitterData string, screenName string);

@Export('travelTimeRequestStream:1.0.0')
define stream travelTimeRequestStream (fromStop string, toStop string, time long, name string);

from twitterInputStream
select twitterData, screenName, UUID() as id
insert into standredTwitterInputStream;

@info(name= 'NameEntityIdentificationQuery', description = 'NLP query to identify NameEntities') 
from standredTwitterInputStream#nlp:findNameEntityTypeViaDictionary('LOCATION', 
																	'repository/deployment/server/dictionary.xml', twitterData, true)
select match, twitterData, screenName, id
insert into locationStream;

from locationStream
select twitterData, 
	   	screenName,
	   	match,
	   	str:regexp(twitterData, str:concat('(?i).*(f|F)(r|R)(o|O)(m|M)(\s|-|:)*', match, ".*")) as isFromCity,
	   	str:regexp(twitterData, str:concat('(?i).*(t|T)(o|O)(\s|-|:)*', match, ".*")) as isToCity,
	   	id
insert into matchedLocationStream;

from every e1 = matchedLocationStream -> e2 = matchedLocationStream[e1.id == id]
select e1.match as city1, e1.isFromCity as isCity1From, e2.match as city2, e2.isFromCity as isCity2From, 
		time:timestampInMilliseconds() as time, e1.screenName as name
insert into corelationStream;

from corelationStream[isCity1From == true and isCity2From == false]
select city1 as fromStop, city2 as toStop, time, name
insert into travelTimeRequestStream;

from corelationStream[isCity1From == false and isCity2From == true]
select city2 as fromStop, city1 as toStop, time, name
insert into travelTimeRequestStream;
