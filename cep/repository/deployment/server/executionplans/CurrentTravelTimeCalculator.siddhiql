/* Enter a unique ExecutionPlan */
@Plan:name('CurrentTravelTimeCalculator')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */

@Plan:trace('true')

@Plan:statistics('true')

@Import('timeBetweenStopsStream:1.0.0')
define stream timeBetweenStopsStream (stopId string, prevStopId string, stopIdLatitude double, stopIdLongitude double, prevStopIdLatitude double, prevStopIdLongitude double, timeStamp long, t_hour int, timeTaken long);

@Import('historicTravelTimeResponseStream:1.0.0')
define stream historicTravelTimeResponseStream (fromStop string, toStop string, fromStopId string, toStopId string, name string, historicTravelTimeByBus long, travelTimeByBike long, travelTimeOnFoot long);

@Export('currentTravelTimeResponseStream:1.0.0')
define stream currentTravelTimeResponseStream (fromStop string, toStop string, fromStopId string, toStopId string, name string, currentTravelTimeByBus long, historicTravelTimeByBus long, travelTimeByBike long, travelTimeOnFoot long);

@From(eventtable='rdbms', datasource.name='WSO2_GEO_DB', table.name='TravelTimeTable')
define table historicTravelTimeTable (fromStop string, toStop string, travelTimeByBus long, travelTimeByBike long, travelTimeOnFoot long);

@IndexBy("fromStop")
define table travelTimeTable (fromStop string, toStop string, travelTimeByBus long);

define trigger travelTimeTableTrigger at 'start';

from travelTimeTableTrigger join historicTravelTimeTable
select fromStop, toStop, travelTimeByBus
insert into travelTimeTable;

from timeBetweenStopsStream
select prevStopId as fromStop, stopId as toStop, timeTaken/6000l as travelTimeByBus
insert into travelTimeTable;

from historicTravelTimeResponseStream as h join travelTimeTable as t
on h.fromStopId == t.fromStop
select h.fromStop, 
		h.toStop, 
		h.fromStopId, 
		t.toStop as toStopId, 
		h.name, 
		0l as travelTimeByBus, 
		historicTravelTimeByBus,
		travelTimeByBike, 
		travelTimeOnFoot,
		h.fromStopId as origenId,
		h.toStopId as destinationId
insert into tableJoinResultStream;

from tableJoinResultStream[toStopId == destinationId]
select fromStop, 
		toStop, 
		origenId as fromStopId, 
		destinationId as toStopId, 
		name, 
		travelTimeByBus as currentTravelTimeByBus, 
		historicTravelTimeByBus,
		travelTimeByBike, 
		travelTimeOnFoot
insert into currentTravelTimeResponseStream;

from tableJoinResultStream[toStopId != destinationId]
insert into joinWithTimeTableStream;

from joinWithTimeTableStream join travelTimeTable 
on travelTimeTable.fromStop == joinWithTimeTableStream.toStopId
select joinWithTimeTableStream.fromStop, 
		joinWithTimeTableStream.toStop, 
		joinWithTimeTableStream.fromStopId, 
		travelTimeTable.toStop as toStopId, 
		joinWithTimeTableStream.name, 
		(joinWithTimeTableStream.travelTimeByBus + travelTimeTable.travelTimeByBus) as travelTimeByBus, 
		historicTravelTimeByBus,
		travelTimeByBike, 
		travelTimeOnFoot,
		origenId,
	   	destinationId
insert into tableJoinResultStream;