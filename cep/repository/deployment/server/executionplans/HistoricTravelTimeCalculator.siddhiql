/* Enter a unique ExecutionPlan */
@Plan:name('HistoricTravelTimeCalculator')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */

@Plan:trace('true')

@Plan:statistics('true')

@Import('travelTimeRequestStream:1.0.0')
define stream travelTimeRequestStream (fromStop string, toStop string, time long, name string);

@Export('historicTravelTimeResponseStream:1.0.0')
define stream historicTravelTimeResponseStream (fromStop string, toStop string, fromStopId string, toStopId string, name string, 
												historicTravelTimeByBus long, travelTimeByBike long, travelTimeOnFoot long);

@From(eventtable='rdbms', datasource.name='WSO2_GEO_DB', table.name='TravelTimeTable')
define table travelTimeTable (fromStop string, toStop string, travelTimeByBus long, travelTimeByBike long, travelTimeOnFoot long);

@From(eventtable='rdbms', datasource.name='WSO2_GEO_DB', table.name='StopTable')
define table stopTable (name string, id string, naptan string, sequence int, line string, direction int,
						latitude double, longitude double);
						
from travelTimeRequestStream join stopTable
on travelTimeRequestStream.fromStop == stopTable.name
select fromStop, toStop, stopTable.id as fromStopId, time, travelTimeRequestStream.name
insert into intermediateTravelTimeRequestStream;

from intermediateTravelTimeRequestStream join stopTable
on intermediateTravelTimeRequestStream.toStop == stopTable.name
select fromStop, toStop, fromStopId, stopTable.id as toStopId, time, intermediateTravelTimeRequestStream.name
insert into postTravelTimeRequestStream;

from postTravelTimeRequestStream join travelTimeTable
on postTravelTimeRequestStream.fromStopId == travelTimeTable.fromStop
select postTravelTimeRequestStream.fromStop, 
		postTravelTimeRequestStream.toStop, 
		fromStopId, 
		travelTimeTable.toStop as toStopId, 
		postTravelTimeRequestStream.name, 
		travelTimeByBus, 
		travelTimeByBike, 
		travelTimeOnFoot, 
		fromStopId as origenId,
		toStopId as destinationId
insert into tableJoinResultStream;

from tableJoinResultStream[toStopId == destinationId]
select fromStop, 
		toStop, 
		origenId as fromStopId, 
		destinationId as toStopId, 
		name, 
		travelTimeByBus as historicTravelTimeByBus, 
		travelTimeByBike, 
		travelTimeOnFoot
insert into historicTravelTimeResponseStream;

from tableJoinResultStream[toStopId != destinationId]
insert into joinWithTimeTableStream;

from joinWithTimeTableStream join travelTimeTable 
on travelTimeTable.fromStop == joinWithTimeTableStream.toStopId
select joinWithTimeTableStream.fromStop, 
		joinWithTimeTableStream.toStop, 
		joinWithTimeTableStream.fromStopId, 
		travelTimeTable.toStop as toStopId, 
		joinWithTimeTableStream.name, 
		(joinWithTimeTableStream.travelTimeByBus + travelTimeTable.travelTimeByBus) as travelTimeByBus, 
		(joinWithTimeTableStream.travelTimeByBike + travelTimeTable.travelTimeByBike) as travelTimeByBike, 
		(joinWithTimeTableStream.travelTimeOnFoot + travelTimeTable.travelTimeOnFoot) as travelTimeOnFoot, 
		origenId,
	   	destinationId
insert into tableJoinResultStream;
